#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
readonly SCRIPT_DIR

echo "[test-in-docker] BASHVER=${BASHVER:=4.4}"
DOCKER_IMAGE="lobash/test-bash:$BASHVER"

if [[ -z $(docker images -q $DOCKER_IMAGE) ]]; then
  if [[ -n ${PULL_IMAGE:-} ]]; then
    docker pull $DOCKER_IMAGE
  else
    echo "To build image $DOCKER_IMAGE"
    BASHVER=$BASHVER IN_CHINA=${IN_CHINA:-} "$SCRIPT_DIR/build-test-image"
  fi
fi

if (( $# > 0 )); then
  if [[ $1 == -d ]] || [[ "${*: -1}" == -d  ]]; then
    cmd="mkdir -p dist && ./build ./dist && ./test $*"
  else
    cmd="./test $*"
  fi
else
  cmd="./test"
fi

args=(
  # NOTE: Do not set `-i` parameter
  --rm -t
  -e DOCKER=true
  -e CI="${CI:-}"
  -e OS="alpine"
  -e BASHVER="$BASHVER"
)

vols=(
  .git test build version src tests tools
)

for vol in "${vols[@]}"; do
  v=$(printf '%s:%s' "$SCRIPT_DIR/../$vol" "/lobash/$vol")
  # shellcheck disable=2016
  args+=( -v "$v")
done

echo "docker run ${args[*]} $DOCKER_IMAGE $cmd"

docker run "${args[@]}" "$DOCKER_IMAGE" "$cmd"
